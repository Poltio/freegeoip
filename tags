!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AddFlags	apiserver/config.go	/^func (c *Config) AddFlags(fs *flag.FlagSet) {$/;"	f
Close	db.go	/^func (db *DB) Close() {$/;"	f
Config	apiserver/config.go	/^type Config struct {$/;"	t
DB	db.go	/^type DB struct {$/;"	t
Date	db.go	/^func (db *DB) Date() time.Time {$/;"	f
DefaultQuery	db.go	/^type DefaultQuery struct {$/;"	t
ErrUnavailable	db.go	/^	ErrUnavailable = errors.New("no database available")$/;"	v
ExampleOpen	example_test.go	/^func ExampleOpen() {$/;"	f
ExampleOpenURL	example_test.go	/^func ExampleOpenURL() {$/;"	f
Lookup	db.go	/^func (db *DB) Lookup(addr net.IP, result interface{}) error {$/;"	f
MaxMindDB	db.go	/^	MaxMindDB = "http:\/\/geolite.maxmind.com\/download\/geoip\/database\/GeoLite2-City.mmdb.gz"$/;"	v
MaxMindUpdateURL	db.go	/^func MaxMindUpdateURL(hostname, productID, userID, licenseKey string) (string, error) {$/;"	f
NewConfig	apiserver/config.go	/^func NewConfig() *Config {$/;"	f
NewHandler	apiserver/api.go	/^func NewHandler(c *Config) (http.Handler, error) {$/;"	f
NotifyClose	db.go	/^func (db *DB) NotifyClose() <-chan struct{} {$/;"	f
NotifyError	db.go	/^func (db *DB) NotifyError() (errChan <-chan error) {$/;"	f
NotifyInfo	db.go	/^func (db *DB) NotifyInfo() <-chan string {$/;"	f
NotifyOpen	db.go	/^func (db *DB) NotifyOpen() (filename <-chan string) {$/;"	f
Open	db.go	/^func Open(dsn string) (*DB, error) {$/;"	f
OpenURL	db.go	/^func OpenURL(url string, updateInterval, maxRetryInterval time.Duration) (*DB, error) {$/;"	f
Record	apiserver/api.go	/^func (q *geoipQuery) Record(ip net.IP, lang string) *responseRecord {$/;"	f
Run	apiserver/main.go	/^func Run() {$/;"	f
String	apiserver/api.go	/^func (rr *responseRecord) String() string {$/;"	f
TestConfig	apiserver/config_test.go	/^func TestConfig(t *testing.T) {$/;"	f
TestDownload	db_test.go	/^func TestDownload(t *testing.T) {$/;"	f
TestHandler	apiserver/api_test.go	/^func TestHandler(t *testing.T) {$/;"	f
TestLookuUnavailable	db_test.go	/^func TestLookuUnavailable(t *testing.T) {$/;"	f
TestLookupOnFile	db_test.go	/^func TestLookupOnFile(t *testing.T) {$/;"	f
TestLookupOnURL	db_test.go	/^func TestLookupOnURL(t *testing.T) {$/;"	f
TestMaxMindUpdateURL	db_test.go	/^func TestMaxMindUpdateURL(t *testing.T) {$/;"	f
TestMetricsHandler	apiserver/api_test.go	/^func TestMetricsHandler(t *testing.T) {$/;"	f
TestNeedUpdate	db_test.go	/^func TestNeedUpdate(t *testing.T) {$/;"	f
TestNeedUpdateFileMissing	db_test.go	/^func TestNeedUpdateFileMissing(t *testing.T) {$/;"	f
TestNeedUpdateMD5	db_test.go	/^func TestNeedUpdateMD5(t *testing.T) {$/;"	f
TestNeedUpdateSameFile	db_test.go	/^func TestNeedUpdateSameFile(t *testing.T) {$/;"	f
TestNeedUpdateSameMD5	db_test.go	/^func TestNeedUpdateSameMD5(t *testing.T) {$/;"	f
TestOpenBadFile	db_test.go	/^func TestOpenBadFile(t *testing.T) {$/;"	f
TestOpenFile	db_test.go	/^func TestOpenFile(t *testing.T) {$/;"	f
TestSendError	db_test.go	/^func TestSendError(t *testing.T) {$/;"	f
TestSkipSendError	db_test.go	/^func TestSkipSendError(t *testing.T) {$/;"	f
TestWatchFile	db_test.go	/^func TestWatchFile(t *testing.T) {$/;"	f
TestWatchMkdir	db_test.go	/^func TestWatchMkdir(t *testing.T) {$/;"	f
TestWatchMkdirFail	db_test.go	/^func TestWatchMkdirFail(t *testing.T) {$/;"	f
TestWriters	apiserver/api_test.go	/^func TestWriters(t *testing.T) {$/;"	f
Version	apiserver/main.go	/^var Version = "3.2"$/;"	v
accessLogger	apiserver/config.go	/^func (c *Config) accessLogger() *log.Logger {$/;"	f
apiHandler	apiserver/api.go	/^type apiHandler struct {$/;"	t
apiserver	apiserver/api.go	/^package apiserver$/;"	p
apiserver	apiserver/api_test.go	/^package apiserver$/;"	p
apiserver	apiserver/config.go	/^package apiserver$/;"	p
apiserver	apiserver/config_test.go	/^package apiserver$/;"	p
apiserver	apiserver/doc.go	/^package apiserver$/;"	p
apiserver	apiserver/main.go	/^package apiserver$/;"	p
apiserver	apiserver/metrics.go	/^package apiserver$/;"	p
autoUpdate	db.go	/^func (db *DB) autoUpdate(url string) {$/;"	f
clientConnsGauge	apiserver/metrics.go	/^var clientConnsGauge = prometheus.NewGaugeVec($/;"	v
clientCountryCounter	apiserver/metrics.go	/^var clientCountryCounter = prometheus.NewCounterVec($/;"	v
clientIPProtoCounter	apiserver/metrics.go	/^var clientIPProtoCounter = prometheus.NewCounterVec($/;"	v
config	apiserver/api.go	/^func (f *apiHandler) config(mc *httpmux.Config) error {$/;"	f
connStateFunc	apiserver/main.go	/^type connStateFunc func(c net.Conn, s http.ConnState)$/;"	t
connStateMetrics	apiserver/main.go	/^func connStateMetrics(proto string) connStateFunc {$/;"	f
csvWriter	apiserver/api.go	/^func csvWriter(w http.ResponseWriter, r *http.Request, d *responseRecord) {$/;"	f
customQuery	example_test.go	/^type customQuery struct {$/;"	t
dbEventCounter	apiserver/metrics.go	/^var dbEventCounter = prometheus.NewCounterVec($/;"	v
defaultDB	db.go	/^	defaultDB = filepath.Join(os.TempDir(), "freegeoip", "db.gz")$/;"	v
download	db.go	/^func (db *DB) download(url string) (tmpfile string, err error) {$/;"	f
errorLogger	apiserver/config.go	/^func (c *Config) errorLogger() *log.Logger {$/;"	f
freegeoip	db.go	/^package freegeoip$/;"	p
freegeoip	db_test.go	/^package freegeoip$/;"	p
freegeoip	doc.go	/^package freegeoip$/;"	p
freegeoip	example_test.go	/^package freegeoip$/;"	p
geoipQuery	apiserver/api.go	/^type geoipQuery struct {$/;"	t
init	apiserver/metrics.go	/^func init() {$/;"	f
iplookup	apiserver/api.go	/^func (f *apiHandler) iplookup(writer writerFunc) http.HandlerFunc {$/;"	f
jsonWriter	apiserver/api.go	/^func jsonWriter(w http.ResponseWriter, r *http.Request, d *responseRecord) {$/;"	f
listenerOpts	apiserver/main.go	/^func listenerOpts(c *Config) []listener.Option {$/;"	f
logWriter	apiserver/config.go	/^func (c *Config) logWriter() io.Writer {$/;"	f
main	cmd/freegeoip/main.go	/^func main() {$/;"	f
main	cmd/freegeoip/main.go	/^package main$/;"	p
makeDir	db.go	/^func (db *DB) makeDir() (dbdir string, err error) {$/;"	f
metrics	apiserver/api.go	/^func (f *apiHandler) metrics(next http.HandlerFunc) http.HandlerFunc {$/;"	f
needUpdate	db.go	/^func (db *DB) needUpdate(url string) (bool, error) {$/;"	f
newRateLimiter	apiserver/api.go	/^func newRateLimiter(c *Config) (*httprl.RateLimiter, error) {$/;"	f
newReader	db.go	/^func (db *DB) newReader(dbfile string) (*maxminddb.Reader, string, error) {$/;"	f
newTestHandler	apiserver/api_test.go	/^func newTestHandler() (http.Handler, error) {$/;"	f
openDB	apiserver/api.go	/^func openDB(c *Config) (*freegeoip.DB, error) {$/;"	f
openFile	db.go	/^func (db *DB) openFile() error {$/;"	f
pack	cmd/freegeoip/release.sh	/^function pack() {$/;"	f
publicDir	apiserver/api.go	/^func (f *apiHandler) publicDir() http.HandlerFunc {$/;"	f
randomIP 	cmd/freegeoip/wrk-test.lua	/^randomIP = function()$/;"	f
register	apiserver/api.go	/^func (f *apiHandler) register(name string, writer writerFunc) http.HandlerFunc {$/;"	f
renameFile	db.go	/^func (db *DB) renameFile(name string) error {$/;"	f
request 	cmd/freegeoip/wrk-test.lua	/^request = function()$/;"	f
responseRecord	apiserver/api.go	/^type responseRecord struct {$/;"	t
roundFloat	apiserver/api.go	/^func roundFloat(val float64, roundOn float64, places int) (newVal float64) {$/;"	f
runInternalServer	apiserver/main.go	/^func runInternalServer(c *Config) {$/;"	f
runServer	apiserver/main.go	/^func runServer(c *Config, f http.Handler) {$/;"	f
runTLSServer	apiserver/main.go	/^func runTLSServer(c *Config, f http.Handler) {$/;"	f
runUpdate	db.go	/^func (db *DB) runUpdate(url string) error {$/;"	f
sendError	db.go	/^func (db *DB) sendError(err error) {$/;"	f
sendInfo	db.go	/^func (db *DB) sendInfo(message string) {$/;"	f
setReader	db.go	/^func (db *DB) setReader(reader *maxminddb.Reader, modtime time.Time, checksum string) {$/;"	f
testFile	db_test.go	/^var testFile = "testdata\/db.gz"$/;"	v
watchEvents	apiserver/api.go	/^func watchEvents(db *freegeoip.DB) {$/;"	f
watchEvents	db.go	/^func (db *DB) watchEvents(watcher *fsnotify.Watcher) {$/;"	f
watchFile	db.go	/^func (db *DB) watchFile() error {$/;"	f
writerFunc	apiserver/api.go	/^type writerFunc func(w http.ResponseWriter, r *http.Request, d *responseRecord)$/;"	t
xmlWriter	apiserver/api.go	/^func xmlWriter(w http.ResponseWriter, r *http.Request, d *responseRecord) {$/;"	f
